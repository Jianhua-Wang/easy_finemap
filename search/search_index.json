{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"easyfinemap \u00b6 user-friendly pipeline for GWAS fine-mapping Documentation: https://Jianhua-Wang.github.io/easyfinemap GitHub: https://github.com/Jianhua-Wang/easyfinemap PyPI: https://pypi.org/project/easyfinemap/ Free software: MIT Features \u00b6 Prepare LD referen for fine-mapping Standardize input summary statistics TODO: Identify independent loci by distance, LD clumping, or conditional analysis TODO: Fine-mapping with or without LD reference Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Index"},{"location":"#easyfinemap","text":"user-friendly pipeline for GWAS fine-mapping Documentation: https://Jianhua-Wang.github.io/easyfinemap GitHub: https://github.com/Jianhua-Wang/easyfinemap PyPI: https://pypi.org/project/easyfinemap/ Free software: MIT","title":"easyfinemap"},{"location":"#features","text":"Prepare LD referen for fine-mapping Standardize input summary statistics TODO: Identify independent loci by distance, LD clumping, or conditional analysis TODO: Fine-mapping with or without LD reference","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"Changelog \u00b6 [0.1.1] - 2023-01-07 \u00b6 Added \u00b6 add temp dir decorator identify lead SNPs by LD clumping identify lead SNPs by conditional analysis Changed \u00b6 Fixed \u00b6 [0.0.5] - 2022-12-26 \u00b6 Added \u00b6 validate GWAS summary statistics Changed \u00b6 Fixed \u00b6 [0.0.4] - 2022-12-26 \u00b6 Added \u00b6 prepare and validate LD reference panel Changed \u00b6 Fixed \u00b6 [0.0.1] - 2022-12-20 \u00b6 Added \u00b6 merge the overlapped independent loci (optional). Changed \u00b6 Fixed \u00b6 [0.0.2] - 2022-12-22 \u00b6 Added \u00b6 identify the independent lead snps by distance only expand the independent lead snps to independent loci by given range. Changed \u00b6 Fixed \u00b6 [0.0.3] - 2022-12-22 \u00b6 Added \u00b6 extract LD ref plink bfile and clean it. Changed \u00b6 Fixed \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#011-2023-01-07","text":"","title":"[0.1.1] - 2023-01-07"},{"location":"changelog/#added","text":"add temp dir decorator identify lead SNPs by LD clumping identify lead SNPs by conditional analysis","title":"Added"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"changelog/#005-2022-12-26","text":"","title":"[0.0.5] - 2022-12-26"},{"location":"changelog/#added_1","text":"validate GWAS summary statistics","title":"Added"},{"location":"changelog/#changed_1","text":"","title":"Changed"},{"location":"changelog/#fixed_1","text":"","title":"Fixed"},{"location":"changelog/#004-2022-12-26","text":"","title":"[0.0.4] - 2022-12-26"},{"location":"changelog/#added_2","text":"prepare and validate LD reference panel","title":"Added"},{"location":"changelog/#changed_2","text":"","title":"Changed"},{"location":"changelog/#fixed_2","text":"","title":"Fixed"},{"location":"changelog/#001-2022-12-20","text":"","title":"[0.0.1] - 2022-12-20"},{"location":"changelog/#added_3","text":"merge the overlapped independent loci (optional).","title":"Added"},{"location":"changelog/#changed_3","text":"","title":"Changed"},{"location":"changelog/#fixed_3","text":"","title":"Fixed"},{"location":"changelog/#002-2022-12-22","text":"","title":"[0.0.2] - 2022-12-22"},{"location":"changelog/#added_4","text":"identify the independent lead snps by distance only expand the independent lead snps to independent loci by given range.","title":"Added"},{"location":"changelog/#changed_4","text":"","title":"Changed"},{"location":"changelog/#fixed_4","text":"","title":"Fixed"},{"location":"changelog/#003-2022-12-22","text":"","title":"[0.0.3] - 2022-12-22"},{"location":"changelog/#added_5","text":"extract LD ref plink bfile and clean it.","title":"Added"},{"location":"changelog/#changed_5","text":"","title":"Changed"},{"location":"changelog/#fixed_5","text":"","title":"Fixed"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install easy_finemap, run this command in your terminal: $ pip install easy_finemap This is the preferred method to install easy_finemap, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for easy_finemap can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/Jianhua-Wang/easy_finemap Or download the tarball : $ curl -OJL https://github.com/Jianhua-Wang/easy_finemap/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install easy_finemap, run this command in your terminal: $ pip install easy_finemap This is the preferred method to install easy_finemap, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for easy_finemap can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/Jianhua-Wang/easy_finemap Or download the tarball : $ curl -OJL https://github.com/Jianhua-Wang/easy_finemap/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use easy_finemap in a project import easy_finemap","title":"Usage"},{"location":"usage/#usage","text":"To use easy_finemap in a project import easy_finemap","title":"Usage"},{"location":"api/LDRef/","text":"Prepare LD reference for easyfinemap. Source code in easyfinemap/ldref.py 30 31 32 33 34 35 36 def __init__ ( self ): \"\"\"Initialize the LDRef class.\"\"\" self . logger = logging . getLogger ( \"LDRef\" ) self . plink = Tools () . plink self . tmp_root = Path . cwd () / \"tmp\" / \"ldref\" if not self . tmp_root . exists (): self . tmp_root . mkdir ( parents = True ) extract ( inprefix , outprefix , chrom , temp_dir = None , start = None , end = None , mac = 10 ) \u00b6 Extract the genotypes of given region from the LD reference. Parameters: Name Type Description Default inprefix str The input prefix. required outprefix str The output prefix. required chrom int The chromosome number. required temp_dir str The temporary directory. None start int , optional The start position, by default None None end int , optional The end position, by default None None mac int The minor allele count threshold, by default 10 10 Returns: Type Description None Source code in easyfinemap/ldref.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 @io_in_tempdir ( dir = \"./tmp/ldref\" ) def extract ( self , inprefix : str , outprefix : str , chrom : int , temp_dir : Optional [ str ] = None , start : Optional [ int ] = None , end : Optional [ int ] = None , mac : int = 10 , ) -> None : \"\"\" Extract the genotypes of given region from the LD reference. Parameters ---------- inprefix : str The input prefix. outprefix : str The output prefix. chrom : int The chromosome number. temp_dir : str The temporary directory. start : int, optional The start position, by default None end : int, optional The end position, by default None mac: int, optional The minor allele count threshold, by default 10 Returns ------- None \"\"\" region_file = f \" { temp_dir } / { outprefix . split ( '/' )[ - 1 ] } .region\" if start is None : extract_cmd = [ \"--chr\" , str ( chrom )] else : with open ( region_file , \"w\" ) as f : f . write ( f \" { chrom } \\t { start } \\t { end } \\t region\" ) extract_cmd = [ \"--extract\" , \"range\" , region_file ] if \" {chrom} \" in inprefix : inprefix = inprefix . replace ( \" {chrom} \" , str ( chrom )) if not os . path . exists ( f \" { inprefix } .bed\" ): raise FileNotFoundError ( f \" { inprefix } .bed not found.\" ) cmd = [ self . plink , \"--bfile\" , inprefix , * extract_cmd , \"--keep-allele-order\" , \"--mac\" , str ( mac ), \"--make-bed\" , \"--out\" , outprefix , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"extract chr { chrom } : { start } - { end } from { inprefix } \" ) if res . returncode != 0 : self . logger . error ( res . stderr ) self . logger . error ( f 'see log file: { outprefix } .log for details' ) raise RuntimeError ( res . stderr ) intersect ( sumstats , ldref , out_plink , use_ref_EAF = False , temp_dir = None ) \u00b6 Intersect the significant snps with the LD reference. Parameters: Name Type Description Default sumstats pd . DataFrame The summary statistics. required ldref str The path to the LD reference file. required out_plink str The output prefix. required use_ref_EAF bool , optional Use the EAF in the LD reference, by default False False temp_dir Optional [ str ], optional The path to the temporary directory, by default None None Returns: Type Description pd . DataFrame The intersected significant snps. Source code in easyfinemap/ldref.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 @io_in_tempdir ( dir = \"./tmp/ldref\" ) def intersect ( self , sumstats : pd . DataFrame , ldref : str , out_plink : str , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Intersect the significant snps with the LD reference. Parameters ---------- sumstats : pd.DataFrame The summary statistics. ldref : str The path to the LD reference file. out_plink : str The output prefix. use_ref_EAF : bool, optional Use the EAF in the LD reference, by default False temp_dir : Optional[str], optional The path to the temporary directory, by default None Returns ------- pd.DataFrame The intersected significant snps. \"\"\" if not os . path . exists ( f \" { ldref } .bim\" ): raise FileNotFoundError ( f \" { ldref } .bim not found.\" ) sumstats [ ColName . SNPID ] . to_csv ( f \" { temp_dir } /overlap_snpid.txt\" , index = False , header = False ) cmd = [ self . plink , \"--bfile\" , ldref , \"--extract\" , f \" { temp_dir } /overlap_snpid.txt\" , \"--keep-allele-order\" , \"--make-bed\" , \"--out\" , out_plink , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"intersect { sumstats . shape [ 0 ] } SNPs with { ldref } \" ) if res . returncode != 0 : self . logger . error ( res . stderr ) self . logger . error ( f 'see log file: { out_plink } .log for details' ) raise RuntimeError ( res . stderr ) bim = pd . read_csv ( f \" { out_plink } .bim\" , delim_whitespace = True , names = [ ColName . CHR , ColName . RSID , \"cM\" , ColName . BP , ColName . EA , ColName . NEA ], ) overlap_sumstat = sumstats [ sumstats [ ColName . SNPID ] . isin ( bim [ ColName . RSID ])] . copy () overlap_sumstat . reset_index ( drop = True , inplace = True ) if use_ref_EAF : cmd = [ self . plink , \"--bfile\" , out_plink , \"--freq\" , \"--out\" , f \" { temp_dir } /freq\" , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"calculate EAF of { out_plink } \" ) # if res.returncode != 0: # self.logger.error(res.stderr) # self.logger.error(f'see log file: {temp_dir}/freq.log for details') # raise RuntimeError(res.stderr) freq = pd . read_csv ( f \" { temp_dir } /freq.frq\" , delim_whitespace = True ) freq [ 'A2_frq' ] = 1 - freq [ 'MAF' ] overlap_sumstat [ 'EAF' ] = freq [ 'A2_frq' ] . where ( freq [ 'A2' ] == overlap_sumstat [ 'EA' ], freq [ 'MAF' ]) overlap_sumstat [ 'MAF' ] = freq [ 'MAF' ] return overlap_sumstat valid ( ldref_path , outprefix , file_type = 'plink' , mac = 10 , threads = 1 , temp_dir = None ) \u00b6 Validate the LD reference file. TODO:1. format vcfs to plink files. 2. remove duplicated snps. 3. remove snps with MAC < mac. 4. make SNP names unique, chr-bp-sorted(EA,NEA). TODO:5. mark bim file with \"#easyfinemap validated\" flag in the first line. Parameters: Name Type Description Default ldref_path str The path to the LD reference file. required outprefix str The output prefix. required file_type str , optional The file type of the LD reference file, by default \"plink\" 'plink' mac int The minor allele count threshold, by default 10 SNPs with MAC < mac will be removed. 10 threads int , optional The number of threads to use, by default 1 1 temp_dir Optional [ str ], optional The path to the temporary directory, by default None None Raises: Type Description ValueError If the file type is not supported. Returns: Type Description None Source code in easyfinemap/ldref.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @io_in_tempdir ( dir = './tmp/ldref' ) def valid ( self , ldref_path : str , outprefix : str , file_type : str = \"plink\" , mac : int = 10 , threads : int = 1 , temp_dir : Optional [ str ] = None , ) -> None : \"\"\" Validate the LD reference file. TODO:1. format vcfs to plink files. 2. remove duplicated snps. 3. remove snps with MAC < mac. 4. make SNP names unique, chr-bp-sorted(EA,NEA). TODO:5. mark bim file with \"#easyfinemap validated\" flag in the first line. Parameters ---------- ldref_path : str The path to the LD reference file. outprefix : str The output prefix. file_type : str, optional The file type of the LD reference file, by default \"plink\" mac: int, optional The minor allele count threshold, by default 10 SNPs with MAC < mac will be removed. threads : int, optional The number of threads to use, by default 1 temp_dir : Optional[str], optional The path to the temporary directory, by default None Raises ------ ValueError If the file type is not supported. Returns ------- None \"\"\" if file_type == \"plink\" : self . file_type = file_type else : raise ValueError ( f \"Unsupported file type: { file_type } \" ) params : List [ List [ Union [ str , int ]]] = [[] for _ in range ( 3 )] for chrom in CHROMS : if \" {chrom} \" in ldref_path : inprefix = ldref_path . replace ( \" {chrom} \" , str ( chrom )) if not os . path . exists ( f \" { inprefix } .bed\" ): self . logger . warning ( f \" { inprefix } .bed not found.\" ) continue else : params [ 0 ] . append ( inprefix ) params [ 1 ] . append ( f \" { outprefix } .chr { chrom } \" ) params [ 2 ] . append ( mac ) else : inprefix = ldref_path if not os . path . exists ( f \" { inprefix } .bed\" ): raise FileNotFoundError ( f \" { inprefix } .bed not found.\" ) else : # check if chrom is in the bim file res = check_output ( f 'grep \"^ { chrom } [[:space:]]\" { inprefix } .bim | head -n 1' , shell = True ) if len ( res . decode ()) == 0 : self . logger . warning ( f \"Chrom { chrom } not found in { inprefix } .bim\" ) continue else : intermed_prefix = f \" { temp_dir } / { outprefix . split ( '/' )[ - 1 ] } .chr { chrom } \" self . extract ( inprefix , intermed_prefix , chrom , mac = mac ) params [ 0 ] . append ( intermed_prefix ) params [ 1 ] . append ( f \" { outprefix } .chr { chrom } \" ) params [ 2 ] . append ( mac ) with Pool ( threads ) as p : p . map ( self . _clean_per_chr , * params )","title":"LDRef"},{"location":"api/LDRef/#easyfinemap.ldref.LDRef.extract","text":"Extract the genotypes of given region from the LD reference. Parameters: Name Type Description Default inprefix str The input prefix. required outprefix str The output prefix. required chrom int The chromosome number. required temp_dir str The temporary directory. None start int , optional The start position, by default None None end int , optional The end position, by default None None mac int The minor allele count threshold, by default 10 10 Returns: Type Description None Source code in easyfinemap/ldref.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 @io_in_tempdir ( dir = \"./tmp/ldref\" ) def extract ( self , inprefix : str , outprefix : str , chrom : int , temp_dir : Optional [ str ] = None , start : Optional [ int ] = None , end : Optional [ int ] = None , mac : int = 10 , ) -> None : \"\"\" Extract the genotypes of given region from the LD reference. Parameters ---------- inprefix : str The input prefix. outprefix : str The output prefix. chrom : int The chromosome number. temp_dir : str The temporary directory. start : int, optional The start position, by default None end : int, optional The end position, by default None mac: int, optional The minor allele count threshold, by default 10 Returns ------- None \"\"\" region_file = f \" { temp_dir } / { outprefix . split ( '/' )[ - 1 ] } .region\" if start is None : extract_cmd = [ \"--chr\" , str ( chrom )] else : with open ( region_file , \"w\" ) as f : f . write ( f \" { chrom } \\t { start } \\t { end } \\t region\" ) extract_cmd = [ \"--extract\" , \"range\" , region_file ] if \" {chrom} \" in inprefix : inprefix = inprefix . replace ( \" {chrom} \" , str ( chrom )) if not os . path . exists ( f \" { inprefix } .bed\" ): raise FileNotFoundError ( f \" { inprefix } .bed not found.\" ) cmd = [ self . plink , \"--bfile\" , inprefix , * extract_cmd , \"--keep-allele-order\" , \"--mac\" , str ( mac ), \"--make-bed\" , \"--out\" , outprefix , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"extract chr { chrom } : { start } - { end } from { inprefix } \" ) if res . returncode != 0 : self . logger . error ( res . stderr ) self . logger . error ( f 'see log file: { outprefix } .log for details' ) raise RuntimeError ( res . stderr )","title":"extract()"},{"location":"api/LDRef/#easyfinemap.ldref.LDRef.intersect","text":"Intersect the significant snps with the LD reference. Parameters: Name Type Description Default sumstats pd . DataFrame The summary statistics. required ldref str The path to the LD reference file. required out_plink str The output prefix. required use_ref_EAF bool , optional Use the EAF in the LD reference, by default False False temp_dir Optional [ str ], optional The path to the temporary directory, by default None None Returns: Type Description pd . DataFrame The intersected significant snps. Source code in easyfinemap/ldref.py 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 @io_in_tempdir ( dir = \"./tmp/ldref\" ) def intersect ( self , sumstats : pd . DataFrame , ldref : str , out_plink : str , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Intersect the significant snps with the LD reference. Parameters ---------- sumstats : pd.DataFrame The summary statistics. ldref : str The path to the LD reference file. out_plink : str The output prefix. use_ref_EAF : bool, optional Use the EAF in the LD reference, by default False temp_dir : Optional[str], optional The path to the temporary directory, by default None Returns ------- pd.DataFrame The intersected significant snps. \"\"\" if not os . path . exists ( f \" { ldref } .bim\" ): raise FileNotFoundError ( f \" { ldref } .bim not found.\" ) sumstats [ ColName . SNPID ] . to_csv ( f \" { temp_dir } /overlap_snpid.txt\" , index = False , header = False ) cmd = [ self . plink , \"--bfile\" , ldref , \"--extract\" , f \" { temp_dir } /overlap_snpid.txt\" , \"--keep-allele-order\" , \"--make-bed\" , \"--out\" , out_plink , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"intersect { sumstats . shape [ 0 ] } SNPs with { ldref } \" ) if res . returncode != 0 : self . logger . error ( res . stderr ) self . logger . error ( f 'see log file: { out_plink } .log for details' ) raise RuntimeError ( res . stderr ) bim = pd . read_csv ( f \" { out_plink } .bim\" , delim_whitespace = True , names = [ ColName . CHR , ColName . RSID , \"cM\" , ColName . BP , ColName . EA , ColName . NEA ], ) overlap_sumstat = sumstats [ sumstats [ ColName . SNPID ] . isin ( bim [ ColName . RSID ])] . copy () overlap_sumstat . reset_index ( drop = True , inplace = True ) if use_ref_EAF : cmd = [ self . plink , \"--bfile\" , out_plink , \"--freq\" , \"--out\" , f \" { temp_dir } /freq\" , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) self . logger . debug ( ' ' . join ( cmd )) self . logger . debug ( f \"calculate EAF of { out_plink } \" ) # if res.returncode != 0: # self.logger.error(res.stderr) # self.logger.error(f'see log file: {temp_dir}/freq.log for details') # raise RuntimeError(res.stderr) freq = pd . read_csv ( f \" { temp_dir } /freq.frq\" , delim_whitespace = True ) freq [ 'A2_frq' ] = 1 - freq [ 'MAF' ] overlap_sumstat [ 'EAF' ] = freq [ 'A2_frq' ] . where ( freq [ 'A2' ] == overlap_sumstat [ 'EA' ], freq [ 'MAF' ]) overlap_sumstat [ 'MAF' ] = freq [ 'MAF' ] return overlap_sumstat","title":"intersect()"},{"location":"api/LDRef/#easyfinemap.ldref.LDRef.valid","text":"Validate the LD reference file. TODO:1. format vcfs to plink files. 2. remove duplicated snps. 3. remove snps with MAC < mac. 4. make SNP names unique, chr-bp-sorted(EA,NEA). TODO:5. mark bim file with \"#easyfinemap validated\" flag in the first line. Parameters: Name Type Description Default ldref_path str The path to the LD reference file. required outprefix str The output prefix. required file_type str , optional The file type of the LD reference file, by default \"plink\" 'plink' mac int The minor allele count threshold, by default 10 SNPs with MAC < mac will be removed. 10 threads int , optional The number of threads to use, by default 1 1 temp_dir Optional [ str ], optional The path to the temporary directory, by default None None Raises: Type Description ValueError If the file type is not supported. Returns: Type Description None Source code in easyfinemap/ldref.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @io_in_tempdir ( dir = './tmp/ldref' ) def valid ( self , ldref_path : str , outprefix : str , file_type : str = \"plink\" , mac : int = 10 , threads : int = 1 , temp_dir : Optional [ str ] = None , ) -> None : \"\"\" Validate the LD reference file. TODO:1. format vcfs to plink files. 2. remove duplicated snps. 3. remove snps with MAC < mac. 4. make SNP names unique, chr-bp-sorted(EA,NEA). TODO:5. mark bim file with \"#easyfinemap validated\" flag in the first line. Parameters ---------- ldref_path : str The path to the LD reference file. outprefix : str The output prefix. file_type : str, optional The file type of the LD reference file, by default \"plink\" mac: int, optional The minor allele count threshold, by default 10 SNPs with MAC < mac will be removed. threads : int, optional The number of threads to use, by default 1 temp_dir : Optional[str], optional The path to the temporary directory, by default None Raises ------ ValueError If the file type is not supported. Returns ------- None \"\"\" if file_type == \"plink\" : self . file_type = file_type else : raise ValueError ( f \"Unsupported file type: { file_type } \" ) params : List [ List [ Union [ str , int ]]] = [[] for _ in range ( 3 )] for chrom in CHROMS : if \" {chrom} \" in ldref_path : inprefix = ldref_path . replace ( \" {chrom} \" , str ( chrom )) if not os . path . exists ( f \" { inprefix } .bed\" ): self . logger . warning ( f \" { inprefix } .bed not found.\" ) continue else : params [ 0 ] . append ( inprefix ) params [ 1 ] . append ( f \" { outprefix } .chr { chrom } \" ) params [ 2 ] . append ( mac ) else : inprefix = ldref_path if not os . path . exists ( f \" { inprefix } .bed\" ): raise FileNotFoundError ( f \" { inprefix } .bed not found.\" ) else : # check if chrom is in the bim file res = check_output ( f 'grep \"^ { chrom } [[:space:]]\" { inprefix } .bim | head -n 1' , shell = True ) if len ( res . decode ()) == 0 : self . logger . warning ( f \"Chrom { chrom } not found in { inprefix } .bim\" ) continue else : intermed_prefix = f \" { temp_dir } / { outprefix . split ( '/' )[ - 1 ] } .chr { chrom } \" self . extract ( inprefix , intermed_prefix , chrom , mac = mac ) params [ 0 ] . append ( intermed_prefix ) params [ 1 ] . append ( f \" { outprefix } .chr { chrom } \" ) params [ 2 ] . append ( mac ) with Pool ( threads ) as p : p . map ( self . _clean_per_chr , * params )","title":"valid()"},{"location":"api/Loci/","text":"Identify the independent loci. Source code in easyfinemap/loci.py 31 32 33 34 35 36 37 38 def __init__ ( self ): \"\"\"Initialize the Loci class.\"\"\" self . logger = logging . getLogger ( \"Loci\" ) self . plink = Tools () . plink self . gcta = Tools () . gcta self . tmp_root = Path . cwd () / \"tmp\" / \"loci\" if not self . tmp_root . exists (): self . tmp_root . mkdir ( parents = True ) clump_per_chr ( sig_df , ldref , clump_p1 , clump_kb , clump_r2 , temp_dir = None ) \u00b6 LD clumping per chromosome. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required clump_p1 float The p1 threshold. required clump_kb int The kb threshold. required clump_r2 float The r2 threshold. required temp_dir Optional [ str ], optional The temporary directory, by default None None Returns: Type Description pd . DataFrame The clumped snps. Source code in easyfinemap/loci.py 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 @io_in_tempdir ( dir = \"./tmp/loci\" ) def clump_per_chr ( self , sig_df : pd . DataFrame , ldref : str , clump_p1 : float , clump_kb : int , clump_r2 : float , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" LD clumping per chromosome. Parameters ---------- sig_df : pd.DataFrame The significant snps. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. clump_p1 : float The p1 threshold. clump_kb : int The kb threshold. clump_r2 : float The r2 threshold. temp_dir : Optional[str], optional The temporary directory, by default None Returns ------- pd.DataFrame The clumped snps. \"\"\" chrom = sig_df [ ColName . CHR ] . unique ()[ 0 ] clump_p_file = f \" { temp_dir } /clump_p_ { chrom } .txt\" sig_df [[ ColName . SNPID , ColName . P ]] . to_csv ( clump_p_file , sep = \" \\t \" , index = False ) clump_outfile = f \" { temp_dir } /clump_ { chrom } .clumped\" cmd = [ self . plink , \"--bfile\" , ldref . format ( chrom = chrom ), \"--clump\" , clump_p_file , \"--clump-p1\" , str ( clump_p1 ), \"--clump-kb\" , str ( clump_kb ), \"--clump-r2\" , str ( clump_r2 ), \"--clump-snp-field\" , ColName . SNPID , \"--clump-field\" , ColName . P , \"--out\" , f \" { temp_dir } /clump_ { chrom } \" , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : clump_snps = pd . read_csv ( clump_outfile , delim_whitespace = True , usecols = [ \"SNP\" ]) clump_snps = clump_snps [ \"SNP\" ] . to_list () clump_snps = sig_df [ sig_df [ ColName . SNPID ] . isin ( clump_snps )] return clump_snps cojo_slct ( sumstats , ldref , sample_size , cojo_window_kb = 10000 , cojo_collinear = 0.9 , diff_freq = 0.2 , sig_threshold = 5e-08 , use_ref_EAF = False , temp_dir = None ) \u00b6 Conditional analysis for input sumstatistics. Parameters: Name Type Description Default sumstats pd . DataFrame The input sumstatistics, from same chromosome or locus. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required sample_size int The sample size of the input sumstatistics. required cojo_window_kb int , optional The cojo window, by default 10000, unit: kb 10000 cojo_collinear float , optional The cojo collinear, by default 0.9 0.9 diff_freq float , optional The difference frequency, by default 0.2 0.2 sig_threshold float , optional The significance threshold, by default 5e-8 5e-08 use_ref_EAF bool , optional Whether to use the reference EAF, by default False False temp_dir Optional [ str ], optional The temporary directory, by default None None Returns: Type Description pd . DataFrame The conditional snps. Source code in easyfinemap/loci.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 @io_in_tempdir ( dir = \"./tmp/loci\" ) def cojo_slct ( self , sumstats : pd . DataFrame , ldref : str , sample_size : int , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , sig_threshold : float = 5e-8 , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Conditional analysis for input sumstatistics. Parameters ---------- sumstats : pd.DataFrame The input sumstatistics, from same chromosome or locus. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. sample_size : int The sample size of the input sumstatistics. cojo_window_kb : int, optional The cojo window, by default 10000, unit: kb cojo_collinear : float, optional The cojo collinear, by default 0.9 diff_freq : float, optional The difference frequency, by default 0.2 sig_threshold : float, optional The significance threshold, by default 5e-8 use_ref_EAF : bool, optional Whether to use the reference EAF, by default False temp_dir : Optional[str], optional The temporary directory, by default None Returns ------- pd.DataFrame The conditional snps. \"\"\" chrom = sumstats [ ColName . CHR ] . unique ()[ 0 ] cojo_input = sumstats . copy () ld = LDRef () cojo_input = ld . intersect ( sumstats , ldref , f \" { temp_dir } /cojo_input_ { chrom } \" , use_ref_EAF ) cojo_input [ ColName . N ] = sample_size cojo_input = cojo_input [ [ ColName . SNPID , ColName . EA , ColName . NEA , ColName . EAF , ColName . BETA , ColName . SE , ColName . P , ColName . N ] ] cojo_input . rename ( columns = { ColName . SNPID : \"SNP\" , ColName . EA : \"A1\" , ColName . NEA : \"A2\" , ColName . EAF : \"freq\" , ColName . BETA : \"b\" , ColName . SE : \"se\" , ColName . P : \"p\" , ColName . N : \"N\" , }, inplace = True , ) cojo_p_file = f \" { temp_dir } /cojo_input_ { chrom } .ma\" cojo_input . to_csv ( cojo_p_file , sep = \" \" , index = False ) cojo_outfile = f \" { temp_dir } /cojo_ { chrom } .slct\" cmd = [ self . gcta , \"--bfile\" , ldref , \"--cojo-file\" , cojo_p_file , \"--cojo-slct\" , \"--cojo-p\" , str ( sig_threshold ), \"--cojo-wind\" , str ( cojo_window_kb ), \"--cojo-collinear\" , str ( cojo_collinear ), \"--diff-freq\" , str ( diff_freq ), \"--out\" , cojo_outfile , ] self . logger . debug ( f \"Run cojo-slct: { ' ' . join ( cmd ) } \" ) res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : cojo_snps = pd . read_csv ( f \" { cojo_outfile } .jma.cojo\" , delim_whitespace = True , usecols = [ \"SNP\" , \"bJ\" , \"bJ_se\" , \"pJ\" ] ) cojo_snps . rename ( columns = { \"SNP\" : ColName . SNPID , \"bJ\" : ColName . COJO_BETA , \"bJ_se\" : ColName . COJO_SE , \"pJ\" : ColName . COJO_P , }, inplace = True , ) cojo_snps = cojo_snps [ cojo_snps [ ColName . COJO_P ] <= sig_threshold ] cojo_snps = sumstats . merge ( cojo_snps , on = ColName . SNPID , how = \"inner\" ) return cojo_snps identify_indep_loci ( sumstats , sig_threshold = 5e-08 , loci_extend = 500 , if_merge = False , outprefix = None , ldref = None , method = 'distance' , distance = 500 , clump_kb = 500 , clump_r2 = 0.1 , sample_size = None , cojo_window_kb = 10000 , cojo_collinear = 0.9 , diff_freq = 0.2 , use_ref_EAF = False , threads = 1 ) \u00b6 Identify the independent loci. Parameters: Name Type Description Default sumstats pd . DataFrame The input summary statistics. required sig_threshold float , optional The pvalue threshold, by default 5e-8 5e-08 loci_extend int , optional The range to extend the independent lead snps to independent loci, by default 500, unit: kb 500 if_merge bool , optional Whether to merge the overlapped independent loci, by default False False outperfix Optional [ str ], optional The output prefix, by default None required ldref Optional [ str ], optional The LD reference file, by default None None method str , optional The method to identify the independent loci, by default \"distance\", choose from [\"distance\", \"clumping\", \"conditional\"] 'distance' distance int , optional The distance threshold to identify the independent loci, by default 500, unit: kb 500 clump_kb int , optional The distance threshold for LD clumping, by default 10000, unit: kb 500 clump_r2 float , optional The r2 threshold for LD clumping, by default 0.1 0.1 sample_size Optional [ int ], optional The sample size for conditional analysis, by default None None cojo_window_kb int , optional The distance threshold for conditional analysis, by default 10000 10000 cojo_collinear float , optional The collinear threshold for conditional analysis, by default 0.9 0.9 diff_freq float , optional The difference frequency threshold for conditional analysis, by default 0.2 0.2 use_ref_EAF bool , optional Whether to use the reference EAF for conditional analysis, by default False False threads int , optional The number of threads, by default 1 1 Returns: Type Description Tuple [ pd . DataFrame , pd . DataFrame ] The independent lead snps and independent loci. Source code in easyfinemap/loci.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def identify_indep_loci ( self , sumstats : pd . DataFrame , sig_threshold : float = 5e-8 , loci_extend : int = 500 , if_merge : bool = False , outprefix : Optional [ str ] = None , ldref : Optional [ str ] = None , method : str = \"distance\" , distance : int = 500 , clump_kb : int = 500 , clump_r2 : float = 0.1 , sample_size : Optional [ int ] = None , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , use_ref_EAF : bool = False , threads : int = 1 , ) -> Tuple [ pd . DataFrame , pd . DataFrame ]: \"\"\" Identify the independent loci. Parameters ---------- sumstats : pd.DataFrame The input summary statistics. sig_threshold : float, optional The pvalue threshold, by default 5e-8 loci_extend : int, optional The range to extend the independent lead snps to independent loci, by default 500, unit: kb if_merge : bool, optional Whether to merge the overlapped independent loci, by default False outperfix : Optional[str], optional The output prefix, by default None ldref : Optional[str], optional The LD reference file, by default None method : str, optional The method to identify the independent loci, by default \"distance\", choose from [\"distance\", \"clumping\", \"conditional\"] distance : int, optional The distance threshold to identify the independent loci, by default 500, unit: kb clump_kb : int, optional The distance threshold for LD clumping, by default 10000, unit: kb clump_r2 : float, optional The r2 threshold for LD clumping, by default 0.1 sample_size : Optional[int], optional The sample size for conditional analysis, by default None cojo_window_kb : int, optional The distance threshold for conditional analysis, by default 10000 cojo_collinear : float, optional The collinear threshold for conditional analysis, by default 0.9 diff_freq : float, optional The difference frequency threshold for conditional analysis, by default 0.2 use_ref_EAF : bool, optional Whether to use the reference EAF for conditional analysis, by default False threads : int, optional The number of threads, by default 1 Returns ------- Tuple[pd.DataFrame, pd.DataFrame] The independent lead snps and independent loci. \"\"\" sumstats = SumStat ( sumstats ) sumstats = sumstats . standarize () if method == \"distance\" : sig_df = get_significant_snps ( sumstats , sig_threshold ) lead_snp = self . indep_snps_by_distance ( sig_df , distance ) elif method == \"clumping\" : clump_p1 = sig_threshold if ldref is not None : lead_snp = self . indep_snps_by_ldclumping ( sumstats , ldref , clump_p1 , clump_kb , clump_r2 ) else : raise ValueError ( f \"Please provide the ldref file for method: { method } \" ) elif method == \"conditional\" : if ldref is None : raise ValueError ( \"Please provide the ldref file for conditional analysis.\" ) if sample_size is None : raise ValueError ( \"Please provide the sample size for conditional analysis.\" ) else : lead_snp = self . indep_snps_by_conditional ( sumstats , ldref , sample_size , sig_threshold , cojo_window_kb , cojo_collinear , diff_freq , use_ref_EAF , threads , ) else : raise ValueError ( f \"Unsupported method: { method } \" ) if if_merge and ColName . COJO_BETA in lead_snp . columns : logging . warning ( \"The loci identified by cojo may not need merge.\" ) loci = self . leadsnp2loci ( lead_snp , loci_extend , if_merge ) if outprefix : loci_file = f \" { outprefix } .loci.txt\" loci . to_csv ( loci_file , sep = \" \\t \" , index = False ) self . logger . info ( f \"Save the independent loci to { loci_file } \" ) leadsnp_file = f \" { outprefix } .leadsnp.txt\" lead_snp . to_csv ( leadsnp_file , sep = \" \\t \" , index = False ) self . logger . info ( f \"Save the independent lead snps to { leadsnp_file } \" ) return lead_snp , loci indep_snps_by_conditional ( sumstats , ldref , sample_size , sig_threshold = 5e-08 , cojo_window_kb = 10000 , cojo_collinear = 0.9 , diff_freq = 0.2 , use_ref_EAF = False , threads = 1 ) staticmethod \u00b6 Identify the independent snps by conditional analysis. Parameters: Name Type Description Default sumstats pd . DataFrame The summary statistics. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required sample_size int The sample size. required sig_threshold float , optional The significance threshold, by default 5e-8 5e-08 cojo_window_kb int , optional The cojo window, by default 10000, in kb 10000 cojo_collinear float , optional The cojo collinear, by default 0.9 0.9 diff_freq float , optional The difference frequency, by default 0.2 0.2 use_ref_EAF bool , optional Whether to use the reference EAF, by default False False threads int , optional The number of threads, by default 1 TODO: accelerate the process by running cojo in loci identified by distance 1 Source code in easyfinemap/loci.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 @staticmethod def indep_snps_by_conditional ( sumstats : pd . DataFrame , ldref : str , sample_size : int , sig_threshold : float = 5e-8 , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , use_ref_EAF : bool = False , threads : int = 1 , ) -> pd . DataFrame : \"\"\" Identify the independent snps by conditional analysis. Parameters ---------- sumstats : pd.DataFrame The summary statistics. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. sample_size : int The sample size. sig_threshold : float, optional The significance threshold, by default 5e-8 cojo_window_kb : int, optional The cojo window, by default 10000, in kb cojo_collinear : float, optional The cojo collinear, by default 0.9 diff_freq : float, optional The difference frequency, by default 0.2 use_ref_EAF : bool, optional Whether to use the reference EAF, by default False threads : int, optional The number of threads, by default 1 TODO: accelerate the process by running cojo in loci identified by distance \"\"\" logger = logging . getLogger ( 'COJO' ) if not use_ref_EAF and ColName . EAF not in sumstats . columns : raise ValueError ( f \" { ColName . EAF } is not in the sumstats, please set use_ref_EAF to True\" ) sig_df = sumstats [ sumstats [ ColName . P ] <= sig_threshold ] logger . debug ( f \"Number of significant snps: { len ( sig_df ) } \" ) logger . debug ( f \"Number of chromosomes: { len ( sig_df [ ColName . CHR ] . unique ()) } \" ) args_list = [] loci = Loci () # cojo_snps = [] for chrom in sig_df [ ColName . CHR ] . unique (): in_df = sumstats [ sumstats [ ColName . CHR ] == chrom ] # cojo_snp = loci.cojo_slct( # in_df, # type: ignore # ldref.format(chrom=chrom), # sample_size, # cojo_window_kb, # cojo_collinear, # diff_freq, # sig_threshold, # use_ref_EAF, # ) # cojo_snps.append(cojo_snp) args_list . append ( ( in_df , ldref . format ( chrom = chrom ), sample_size , cojo_window_kb , cojo_collinear , diff_freq , sig_threshold , use_ref_EAF , ) ) with ProcessPoolExecutor ( max_workers = threads ) as executor : results = [] with Progress ( auto_refresh = False ) as progress : task = progress . add_task ( \"Run cojo-slct\" , total = len ( args_list )) for _ in executor . map ( loci . cojo_slct , * zip ( * args_list )): progress . update ( task , advance = 1 ) progress . refresh () results . append ( _ ) cojo_snps = pd . concat ( results , axis = 0 , ignore_index = True ) return cojo_snps indep_snps_by_distance ( sig_df , distance = 500 ) staticmethod \u00b6 Identify the independent snps by distance only. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required distance int , optional The distance threshold, by default 500, unit: kb 500 Returns: Type Description pd . DataFrame The independent snps. Source code in easyfinemap/loci.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @staticmethod def indep_snps_by_distance ( sig_df : pd . DataFrame , distance : int = 500 ) -> pd . DataFrame : \"\"\" Identify the independent snps by distance only. Parameters ---------- sig_df : pd.DataFrame The significant snps. distance : int, optional The distance threshold, by default 500, unit: kb Returns ------- pd.DataFrame The independent snps. \"\"\" sig_df . sort_values ( ColName . P , inplace = True ) lead_snp = [] distance = distance * 1000 while len ( sig_df ): lead_snp . append ( sig_df . iloc [[ 0 ]]) sig_df = sig_df [ ~ ( ( sig_df [ ColName . CHR ] == sig_df . iloc [ 0 ][ ColName . CHR ]) & ( sig_df [ ColName . BP ] >= sig_df . iloc [ 0 ][ ColName . BP ] - distance ) & ( sig_df [ ColName . BP ] <= sig_df . iloc [ 0 ][ ColName . BP ] + distance ) ) ] # type: ignore lead_snp = pd . concat ( lead_snp , axis = 0 , ignore_index = True ) return lead_snp indep_snps_by_ldclumping ( sig_df , ldref , clump_p1 = 5e-08 , clump_kb = 500 , clump_r2 = 0.1 ) staticmethod \u00b6 Identify the independent snps by LD clumping. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required clump_p1 float , optional The p1 threshold, by default 5e-8 5e-08 clump_kb int , optional The kb threshold, by default 500, unit: kb 500 clump_r2 float , optional The r2 threshold, by default 0.1 0.1 Returns: Type Description pd . DataFrame Source code in easyfinemap/loci.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 @staticmethod def indep_snps_by_ldclumping ( sig_df : pd . DataFrame , ldref : str , clump_p1 : float = 5e-8 , clump_kb : int = 500 , clump_r2 : float = 0.1 ) -> pd . DataFrame : \"\"\" Identify the independent snps by LD clumping. Parameters ---------- sig_df : pd.DataFrame The significant snps. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. clump_p1 : float, optional The p1 threshold, by default 5e-8 clump_kb : int, optional The kb threshold, by default 500, unit: kb clump_r2 : float, optional The r2 threshold, by default 0.1 Returns ------- pd.DataFrame \"\"\" clumped_snps = [] for chrom in sig_df [ ColName . CHR ] . unique (): sig_df_chr = sig_df [ sig_df [ ColName . CHR ] == chrom ] clumped_snps . append ( Loci () . clump_per_chr ( sig_df_chr , ldref , clump_p1 , clump_kb , clump_r2 )) # type: ignore clumped_snps = pd . concat ( clumped_snps , axis = 0 , ignore_index = True ) return clumped_snps leadsnp2loci ( lead_snps , range = 500 , if_merge = False ) staticmethod \u00b6 Expand the independent lead snps to independent loci by given range. Parameters: Name Type Description Default lead_snps pd . DataFrame The independent lead snps. required range int , optional The range, by default 500, unit: kb 500 if_merge bool , optional Whether merge the overlapped loci, by default False TODO: use custom blocks as loci boundaries False Returns: Type Description pd . DataFrame The independent loci. Source code in easyfinemap/loci.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 @staticmethod def leadsnp2loci ( lead_snps : pd . DataFrame , range : int = 500 , if_merge : bool = False ) -> pd . DataFrame : \"\"\" Expand the independent lead snps to independent loci by given range. Parameters ---------- lead_snps : pd.DataFrame The independent lead snps. range : int, optional The range, by default 500, unit: kb if_merge : bool, optional Whether merge the overlapped loci, by default False TODO: use custom blocks as loci boundaries Returns ------- pd.DataFrame The independent loci. \"\"\" loci_df = lead_snps . copy () # loci_df = make_SNPID_unique(loci_df) range = range * 1000 loci_df = loci_df [[ ColName . CHR , ColName . BP , ColName . P , ColName . SNPID ]] loci_df . columns = [ ColName . CHR , ColName . LEAD_SNP_BP , ColName . LEAD_SNP_P , ColName . LEAD_SNP ] # type: ignore loci_df [ ColName . START ] = loci_df [ ColName . LEAD_SNP_BP ] - range loci_df [ ColName . START ] = loci_df [ ColName . START ] . apply ( lambda x : 0 if x < 0 else x ) loci_df [ ColName . END ] = loci_df [ ColName . LEAD_SNP_BP ] + range loci_df = loci_df [ ColName . loci_cols ] . copy () if if_merge : loci_df = Loci . merge_overlapped_loci ( loci_df ) return loci_df merge_overlapped_loci ( loci_df ) staticmethod \u00b6 Merge the overlapped loci. Parameters: Name Type Description Default loci_df pd . DataFrame The independent loci. required Returns: Type Description pd . DataFrame The merged independent loci. Source code in easyfinemap/loci.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 @staticmethod def merge_overlapped_loci ( loci_df : pd . DataFrame ): \"\"\" Merge the overlapped loci. Parameters ---------- loci_df : pd.DataFrame The independent loci. Returns ------- pd.DataFrame The merged independent loci. \"\"\" merged_loci = loci_df . copy () merged_loci . sort_values ([ ColName . CHR , ColName . START , ColName . END ], inplace = True ) merged_loci [ 'no_overlap' ] = merged_loci [ ColName . START ] > merged_loci [ ColName . END ] . shift () . cummax () merged_loci [ 'diff_chr' ] = merged_loci [ ColName . CHR ] != merged_loci [ ColName . CHR ] . shift () merged_loci [ \"break\" ] = merged_loci [ \"no_overlap\" ] | merged_loci [ 'diff_chr' ] merged_loci [ 'group' ] = merged_loci [ 'break' ] . cumsum () merged_loci = merged_loci . sort_values ([ 'group' , ColName . LEAD_SNP_P ], ascending = True ) agg_func = {} for col in loci_df . columns : if col == ColName . START : agg_func [ col ] = 'min' elif col == ColName . END : agg_func [ col ] = 'max' else : agg_func [ col ] = 'first' result = merged_loci . groupby ( \"group\" ) . agg ( agg_func ) result . reset_index ( drop = True , inplace = True ) return result","title":"Loci"},{"location":"api/Loci/#easyfinemap.loci.Loci.clump_per_chr","text":"LD clumping per chromosome. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required clump_p1 float The p1 threshold. required clump_kb int The kb threshold. required clump_r2 float The r2 threshold. required temp_dir Optional [ str ], optional The temporary directory, by default None None Returns: Type Description pd . DataFrame The clumped snps. Source code in easyfinemap/loci.py 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 @io_in_tempdir ( dir = \"./tmp/loci\" ) def clump_per_chr ( self , sig_df : pd . DataFrame , ldref : str , clump_p1 : float , clump_kb : int , clump_r2 : float , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" LD clumping per chromosome. Parameters ---------- sig_df : pd.DataFrame The significant snps. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. clump_p1 : float The p1 threshold. clump_kb : int The kb threshold. clump_r2 : float The r2 threshold. temp_dir : Optional[str], optional The temporary directory, by default None Returns ------- pd.DataFrame The clumped snps. \"\"\" chrom = sig_df [ ColName . CHR ] . unique ()[ 0 ] clump_p_file = f \" { temp_dir } /clump_p_ { chrom } .txt\" sig_df [[ ColName . SNPID , ColName . P ]] . to_csv ( clump_p_file , sep = \" \\t \" , index = False ) clump_outfile = f \" { temp_dir } /clump_ { chrom } .clumped\" cmd = [ self . plink , \"--bfile\" , ldref . format ( chrom = chrom ), \"--clump\" , clump_p_file , \"--clump-p1\" , str ( clump_p1 ), \"--clump-kb\" , str ( clump_kb ), \"--clump-r2\" , str ( clump_r2 ), \"--clump-snp-field\" , ColName . SNPID , \"--clump-field\" , ColName . P , \"--out\" , f \" { temp_dir } /clump_ { chrom } \" , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : clump_snps = pd . read_csv ( clump_outfile , delim_whitespace = True , usecols = [ \"SNP\" ]) clump_snps = clump_snps [ \"SNP\" ] . to_list () clump_snps = sig_df [ sig_df [ ColName . SNPID ] . isin ( clump_snps )] return clump_snps","title":"clump_per_chr()"},{"location":"api/Loci/#easyfinemap.loci.Loci.cojo_slct","text":"Conditional analysis for input sumstatistics. Parameters: Name Type Description Default sumstats pd . DataFrame The input sumstatistics, from same chromosome or locus. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required sample_size int The sample size of the input sumstatistics. required cojo_window_kb int , optional The cojo window, by default 10000, unit: kb 10000 cojo_collinear float , optional The cojo collinear, by default 0.9 0.9 diff_freq float , optional The difference frequency, by default 0.2 0.2 sig_threshold float , optional The significance threshold, by default 5e-8 5e-08 use_ref_EAF bool , optional Whether to use the reference EAF, by default False False temp_dir Optional [ str ], optional The temporary directory, by default None None Returns: Type Description pd . DataFrame The conditional snps. Source code in easyfinemap/loci.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 @io_in_tempdir ( dir = \"./tmp/loci\" ) def cojo_slct ( self , sumstats : pd . DataFrame , ldref : str , sample_size : int , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , sig_threshold : float = 5e-8 , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Conditional analysis for input sumstatistics. Parameters ---------- sumstats : pd.DataFrame The input sumstatistics, from same chromosome or locus. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. sample_size : int The sample size of the input sumstatistics. cojo_window_kb : int, optional The cojo window, by default 10000, unit: kb cojo_collinear : float, optional The cojo collinear, by default 0.9 diff_freq : float, optional The difference frequency, by default 0.2 sig_threshold : float, optional The significance threshold, by default 5e-8 use_ref_EAF : bool, optional Whether to use the reference EAF, by default False temp_dir : Optional[str], optional The temporary directory, by default None Returns ------- pd.DataFrame The conditional snps. \"\"\" chrom = sumstats [ ColName . CHR ] . unique ()[ 0 ] cojo_input = sumstats . copy () ld = LDRef () cojo_input = ld . intersect ( sumstats , ldref , f \" { temp_dir } /cojo_input_ { chrom } \" , use_ref_EAF ) cojo_input [ ColName . N ] = sample_size cojo_input = cojo_input [ [ ColName . SNPID , ColName . EA , ColName . NEA , ColName . EAF , ColName . BETA , ColName . SE , ColName . P , ColName . N ] ] cojo_input . rename ( columns = { ColName . SNPID : \"SNP\" , ColName . EA : \"A1\" , ColName . NEA : \"A2\" , ColName . EAF : \"freq\" , ColName . BETA : \"b\" , ColName . SE : \"se\" , ColName . P : \"p\" , ColName . N : \"N\" , }, inplace = True , ) cojo_p_file = f \" { temp_dir } /cojo_input_ { chrom } .ma\" cojo_input . to_csv ( cojo_p_file , sep = \" \" , index = False ) cojo_outfile = f \" { temp_dir } /cojo_ { chrom } .slct\" cmd = [ self . gcta , \"--bfile\" , ldref , \"--cojo-file\" , cojo_p_file , \"--cojo-slct\" , \"--cojo-p\" , str ( sig_threshold ), \"--cojo-wind\" , str ( cojo_window_kb ), \"--cojo-collinear\" , str ( cojo_collinear ), \"--diff-freq\" , str ( diff_freq ), \"--out\" , cojo_outfile , ] self . logger . debug ( f \"Run cojo-slct: { ' ' . join ( cmd ) } \" ) res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : cojo_snps = pd . read_csv ( f \" { cojo_outfile } .jma.cojo\" , delim_whitespace = True , usecols = [ \"SNP\" , \"bJ\" , \"bJ_se\" , \"pJ\" ] ) cojo_snps . rename ( columns = { \"SNP\" : ColName . SNPID , \"bJ\" : ColName . COJO_BETA , \"bJ_se\" : ColName . COJO_SE , \"pJ\" : ColName . COJO_P , }, inplace = True , ) cojo_snps = cojo_snps [ cojo_snps [ ColName . COJO_P ] <= sig_threshold ] cojo_snps = sumstats . merge ( cojo_snps , on = ColName . SNPID , how = \"inner\" ) return cojo_snps","title":"cojo_slct()"},{"location":"api/Loci/#easyfinemap.loci.Loci.identify_indep_loci","text":"Identify the independent loci. Parameters: Name Type Description Default sumstats pd . DataFrame The input summary statistics. required sig_threshold float , optional The pvalue threshold, by default 5e-8 5e-08 loci_extend int , optional The range to extend the independent lead snps to independent loci, by default 500, unit: kb 500 if_merge bool , optional Whether to merge the overlapped independent loci, by default False False outperfix Optional [ str ], optional The output prefix, by default None required ldref Optional [ str ], optional The LD reference file, by default None None method str , optional The method to identify the independent loci, by default \"distance\", choose from [\"distance\", \"clumping\", \"conditional\"] 'distance' distance int , optional The distance threshold to identify the independent loci, by default 500, unit: kb 500 clump_kb int , optional The distance threshold for LD clumping, by default 10000, unit: kb 500 clump_r2 float , optional The r2 threshold for LD clumping, by default 0.1 0.1 sample_size Optional [ int ], optional The sample size for conditional analysis, by default None None cojo_window_kb int , optional The distance threshold for conditional analysis, by default 10000 10000 cojo_collinear float , optional The collinear threshold for conditional analysis, by default 0.9 0.9 diff_freq float , optional The difference frequency threshold for conditional analysis, by default 0.2 0.2 use_ref_EAF bool , optional Whether to use the reference EAF for conditional analysis, by default False False threads int , optional The number of threads, by default 1 1 Returns: Type Description Tuple [ pd . DataFrame , pd . DataFrame ] The independent lead snps and independent loci. Source code in easyfinemap/loci.py 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 def identify_indep_loci ( self , sumstats : pd . DataFrame , sig_threshold : float = 5e-8 , loci_extend : int = 500 , if_merge : bool = False , outprefix : Optional [ str ] = None , ldref : Optional [ str ] = None , method : str = \"distance\" , distance : int = 500 , clump_kb : int = 500 , clump_r2 : float = 0.1 , sample_size : Optional [ int ] = None , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , use_ref_EAF : bool = False , threads : int = 1 , ) -> Tuple [ pd . DataFrame , pd . DataFrame ]: \"\"\" Identify the independent loci. Parameters ---------- sumstats : pd.DataFrame The input summary statistics. sig_threshold : float, optional The pvalue threshold, by default 5e-8 loci_extend : int, optional The range to extend the independent lead snps to independent loci, by default 500, unit: kb if_merge : bool, optional Whether to merge the overlapped independent loci, by default False outperfix : Optional[str], optional The output prefix, by default None ldref : Optional[str], optional The LD reference file, by default None method : str, optional The method to identify the independent loci, by default \"distance\", choose from [\"distance\", \"clumping\", \"conditional\"] distance : int, optional The distance threshold to identify the independent loci, by default 500, unit: kb clump_kb : int, optional The distance threshold for LD clumping, by default 10000, unit: kb clump_r2 : float, optional The r2 threshold for LD clumping, by default 0.1 sample_size : Optional[int], optional The sample size for conditional analysis, by default None cojo_window_kb : int, optional The distance threshold for conditional analysis, by default 10000 cojo_collinear : float, optional The collinear threshold for conditional analysis, by default 0.9 diff_freq : float, optional The difference frequency threshold for conditional analysis, by default 0.2 use_ref_EAF : bool, optional Whether to use the reference EAF for conditional analysis, by default False threads : int, optional The number of threads, by default 1 Returns ------- Tuple[pd.DataFrame, pd.DataFrame] The independent lead snps and independent loci. \"\"\" sumstats = SumStat ( sumstats ) sumstats = sumstats . standarize () if method == \"distance\" : sig_df = get_significant_snps ( sumstats , sig_threshold ) lead_snp = self . indep_snps_by_distance ( sig_df , distance ) elif method == \"clumping\" : clump_p1 = sig_threshold if ldref is not None : lead_snp = self . indep_snps_by_ldclumping ( sumstats , ldref , clump_p1 , clump_kb , clump_r2 ) else : raise ValueError ( f \"Please provide the ldref file for method: { method } \" ) elif method == \"conditional\" : if ldref is None : raise ValueError ( \"Please provide the ldref file for conditional analysis.\" ) if sample_size is None : raise ValueError ( \"Please provide the sample size for conditional analysis.\" ) else : lead_snp = self . indep_snps_by_conditional ( sumstats , ldref , sample_size , sig_threshold , cojo_window_kb , cojo_collinear , diff_freq , use_ref_EAF , threads , ) else : raise ValueError ( f \"Unsupported method: { method } \" ) if if_merge and ColName . COJO_BETA in lead_snp . columns : logging . warning ( \"The loci identified by cojo may not need merge.\" ) loci = self . leadsnp2loci ( lead_snp , loci_extend , if_merge ) if outprefix : loci_file = f \" { outprefix } .loci.txt\" loci . to_csv ( loci_file , sep = \" \\t \" , index = False ) self . logger . info ( f \"Save the independent loci to { loci_file } \" ) leadsnp_file = f \" { outprefix } .leadsnp.txt\" lead_snp . to_csv ( leadsnp_file , sep = \" \\t \" , index = False ) self . logger . info ( f \"Save the independent lead snps to { leadsnp_file } \" ) return lead_snp , loci","title":"identify_indep_loci()"},{"location":"api/Loci/#easyfinemap.loci.Loci.indep_snps_by_conditional","text":"Identify the independent snps by conditional analysis. Parameters: Name Type Description Default sumstats pd . DataFrame The summary statistics. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required sample_size int The sample size. required sig_threshold float , optional The significance threshold, by default 5e-8 5e-08 cojo_window_kb int , optional The cojo window, by default 10000, in kb 10000 cojo_collinear float , optional The cojo collinear, by default 0.9 0.9 diff_freq float , optional The difference frequency, by default 0.2 0.2 use_ref_EAF bool , optional Whether to use the reference EAF, by default False False threads int , optional The number of threads, by default 1 TODO: accelerate the process by running cojo in loci identified by distance 1 Source code in easyfinemap/loci.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 @staticmethod def indep_snps_by_conditional ( sumstats : pd . DataFrame , ldref : str , sample_size : int , sig_threshold : float = 5e-8 , cojo_window_kb : int = 10000 , cojo_collinear : float = 0.9 , diff_freq : float = 0.2 , use_ref_EAF : bool = False , threads : int = 1 , ) -> pd . DataFrame : \"\"\" Identify the independent snps by conditional analysis. Parameters ---------- sumstats : pd.DataFrame The summary statistics. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. sample_size : int The sample size. sig_threshold : float, optional The significance threshold, by default 5e-8 cojo_window_kb : int, optional The cojo window, by default 10000, in kb cojo_collinear : float, optional The cojo collinear, by default 0.9 diff_freq : float, optional The difference frequency, by default 0.2 use_ref_EAF : bool, optional Whether to use the reference EAF, by default False threads : int, optional The number of threads, by default 1 TODO: accelerate the process by running cojo in loci identified by distance \"\"\" logger = logging . getLogger ( 'COJO' ) if not use_ref_EAF and ColName . EAF not in sumstats . columns : raise ValueError ( f \" { ColName . EAF } is not in the sumstats, please set use_ref_EAF to True\" ) sig_df = sumstats [ sumstats [ ColName . P ] <= sig_threshold ] logger . debug ( f \"Number of significant snps: { len ( sig_df ) } \" ) logger . debug ( f \"Number of chromosomes: { len ( sig_df [ ColName . CHR ] . unique ()) } \" ) args_list = [] loci = Loci () # cojo_snps = [] for chrom in sig_df [ ColName . CHR ] . unique (): in_df = sumstats [ sumstats [ ColName . CHR ] == chrom ] # cojo_snp = loci.cojo_slct( # in_df, # type: ignore # ldref.format(chrom=chrom), # sample_size, # cojo_window_kb, # cojo_collinear, # diff_freq, # sig_threshold, # use_ref_EAF, # ) # cojo_snps.append(cojo_snp) args_list . append ( ( in_df , ldref . format ( chrom = chrom ), sample_size , cojo_window_kb , cojo_collinear , diff_freq , sig_threshold , use_ref_EAF , ) ) with ProcessPoolExecutor ( max_workers = threads ) as executor : results = [] with Progress ( auto_refresh = False ) as progress : task = progress . add_task ( \"Run cojo-slct\" , total = len ( args_list )) for _ in executor . map ( loci . cojo_slct , * zip ( * args_list )): progress . update ( task , advance = 1 ) progress . refresh () results . append ( _ ) cojo_snps = pd . concat ( results , axis = 0 , ignore_index = True ) return cojo_snps","title":"indep_snps_by_conditional()"},{"location":"api/Loci/#easyfinemap.loci.Loci.indep_snps_by_distance","text":"Identify the independent snps by distance only. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required distance int , optional The distance threshold, by default 500, unit: kb 500 Returns: Type Description pd . DataFrame The independent snps. Source code in easyfinemap/loci.py 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 @staticmethod def indep_snps_by_distance ( sig_df : pd . DataFrame , distance : int = 500 ) -> pd . DataFrame : \"\"\" Identify the independent snps by distance only. Parameters ---------- sig_df : pd.DataFrame The significant snps. distance : int, optional The distance threshold, by default 500, unit: kb Returns ------- pd.DataFrame The independent snps. \"\"\" sig_df . sort_values ( ColName . P , inplace = True ) lead_snp = [] distance = distance * 1000 while len ( sig_df ): lead_snp . append ( sig_df . iloc [[ 0 ]]) sig_df = sig_df [ ~ ( ( sig_df [ ColName . CHR ] == sig_df . iloc [ 0 ][ ColName . CHR ]) & ( sig_df [ ColName . BP ] >= sig_df . iloc [ 0 ][ ColName . BP ] - distance ) & ( sig_df [ ColName . BP ] <= sig_df . iloc [ 0 ][ ColName . BP ] + distance ) ) ] # type: ignore lead_snp = pd . concat ( lead_snp , axis = 0 , ignore_index = True ) return lead_snp","title":"indep_snps_by_distance()"},{"location":"api/Loci/#easyfinemap.loci.Loci.indep_snps_by_ldclumping","text":"Identify the independent snps by LD clumping. Parameters: Name Type Description Default sig_df pd . DataFrame The significant snps. required ldref str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. required clump_p1 float , optional The p1 threshold, by default 5e-8 5e-08 clump_kb int , optional The kb threshold, by default 500, unit: kb 500 clump_r2 float , optional The r2 threshold, by default 0.1 0.1 Returns: Type Description pd . DataFrame Source code in easyfinemap/loci.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 @staticmethod def indep_snps_by_ldclumping ( sig_df : pd . DataFrame , ldref : str , clump_p1 : float = 5e-8 , clump_kb : int = 500 , clump_r2 : float = 0.1 ) -> pd . DataFrame : \"\"\" Identify the independent snps by LD clumping. Parameters ---------- sig_df : pd.DataFrame The significant snps. ldref : str The LD reference file, (plink bfile format, containing wildcard {chrom}), e.g. EUR.chr{chrom}. clump_p1 : float, optional The p1 threshold, by default 5e-8 clump_kb : int, optional The kb threshold, by default 500, unit: kb clump_r2 : float, optional The r2 threshold, by default 0.1 Returns ------- pd.DataFrame \"\"\" clumped_snps = [] for chrom in sig_df [ ColName . CHR ] . unique (): sig_df_chr = sig_df [ sig_df [ ColName . CHR ] == chrom ] clumped_snps . append ( Loci () . clump_per_chr ( sig_df_chr , ldref , clump_p1 , clump_kb , clump_r2 )) # type: ignore clumped_snps = pd . concat ( clumped_snps , axis = 0 , ignore_index = True ) return clumped_snps","title":"indep_snps_by_ldclumping()"},{"location":"api/Loci/#easyfinemap.loci.Loci.leadsnp2loci","text":"Expand the independent lead snps to independent loci by given range. Parameters: Name Type Description Default lead_snps pd . DataFrame The independent lead snps. required range int , optional The range, by default 500, unit: kb 500 if_merge bool , optional Whether merge the overlapped loci, by default False TODO: use custom blocks as loci boundaries False Returns: Type Description pd . DataFrame The independent loci. Source code in easyfinemap/loci.py 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 @staticmethod def leadsnp2loci ( lead_snps : pd . DataFrame , range : int = 500 , if_merge : bool = False ) -> pd . DataFrame : \"\"\" Expand the independent lead snps to independent loci by given range. Parameters ---------- lead_snps : pd.DataFrame The independent lead snps. range : int, optional The range, by default 500, unit: kb if_merge : bool, optional Whether merge the overlapped loci, by default False TODO: use custom blocks as loci boundaries Returns ------- pd.DataFrame The independent loci. \"\"\" loci_df = lead_snps . copy () # loci_df = make_SNPID_unique(loci_df) range = range * 1000 loci_df = loci_df [[ ColName . CHR , ColName . BP , ColName . P , ColName . SNPID ]] loci_df . columns = [ ColName . CHR , ColName . LEAD_SNP_BP , ColName . LEAD_SNP_P , ColName . LEAD_SNP ] # type: ignore loci_df [ ColName . START ] = loci_df [ ColName . LEAD_SNP_BP ] - range loci_df [ ColName . START ] = loci_df [ ColName . START ] . apply ( lambda x : 0 if x < 0 else x ) loci_df [ ColName . END ] = loci_df [ ColName . LEAD_SNP_BP ] + range loci_df = loci_df [ ColName . loci_cols ] . copy () if if_merge : loci_df = Loci . merge_overlapped_loci ( loci_df ) return loci_df","title":"leadsnp2loci()"},{"location":"api/Loci/#easyfinemap.loci.Loci.merge_overlapped_loci","text":"Merge the overlapped loci. Parameters: Name Type Description Default loci_df pd . DataFrame The independent loci. required Returns: Type Description pd . DataFrame The merged independent loci. Source code in easyfinemap/loci.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 @staticmethod def merge_overlapped_loci ( loci_df : pd . DataFrame ): \"\"\" Merge the overlapped loci. Parameters ---------- loci_df : pd.DataFrame The independent loci. Returns ------- pd.DataFrame The merged independent loci. \"\"\" merged_loci = loci_df . copy () merged_loci . sort_values ([ ColName . CHR , ColName . START , ColName . END ], inplace = True ) merged_loci [ 'no_overlap' ] = merged_loci [ ColName . START ] > merged_loci [ ColName . END ] . shift () . cummax () merged_loci [ 'diff_chr' ] = merged_loci [ ColName . CHR ] != merged_loci [ ColName . CHR ] . shift () merged_loci [ \"break\" ] = merged_loci [ \"no_overlap\" ] | merged_loci [ 'diff_chr' ] merged_loci [ 'group' ] = merged_loci [ 'break' ] . cumsum () merged_loci = merged_loci . sort_values ([ 'group' , ColName . LEAD_SNP_P ], ascending = True ) agg_func = {} for col in loci_df . columns : if col == ColName . START : agg_func [ col ] = 'min' elif col == ColName . END : agg_func [ col ] = 'max' else : agg_func [ col ] = 'first' result = merged_loci . groupby ( \"group\" ) . agg ( agg_func ) result . reset_index ( drop = True , inplace = True ) return result","title":"merge_overlapped_loci()"},{"location":"api/Sumstat/","text":"Bases: pd . DataFrame extension of pd.Dataframe for standarize summary statistics. Source code in easyfinemap/sumstat.py 16 17 18 19 def __init__ ( self , * args , ** kwargs ): \"\"\"Initialize the SumstatAccessor class.\"\"\" super () . __init__ ( * args , ** kwargs ) self . logger = logging . getLogger ( \"Sumstat\" ) check_beta () \u00b6 Check if beta is valid. Source code in easyfinemap/sumstat.py 89 90 91 92 93 94 def check_beta ( self ): \"\"\"Check if beta is valid.\"\"\" self [ ColName . BETA ] = pd . to_numeric ( self [ ColName . BETA ], errors = \"coerce\" ) self = self [ self [ ColName . BETA ] . notnull ()] self [ ColName . BETA ] = self [ ColName . BETA ] . astype ( float ) return self check_bp () \u00b6 Check if bp is a valid integer. Source code in easyfinemap/sumstat.py 65 66 67 68 69 70 71 def check_bp ( self ): \"\"\"Check if bp is a valid integer.\"\"\" # raise NotImplementedError self [ ColName . BP ] = pd . to_numeric ( self [ ColName . BP ], errors = \"coerce\" ) self = self [ self [ ColName . BP ] . notnull ()] self [ ColName . BP ] = self [ ColName . BP ] . astype ( int ) return self check_chr () \u00b6 Check if chromosome is a valid integer. Source code in easyfinemap/sumstat.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def check_chr ( self ): \"\"\"Check if chromosome is a valid integer.\"\"\" # remove chr from chromosome column, if exists self = self [ self [ ColName . CHR ] . notnull ()] . copy () self [ ColName . CHR ] = self [ ColName . CHR ] . astype ( \"str\" ) . str . replace ( \"chr\" , \"\" ) # replace X, with 23 self [ ColName . CHR ] = self [ ColName . CHR ] . replace ( \"X\" , 23 ) # turn chromosome column into integer self [ ColName . CHR ] = pd . to_numeric ( self [ ColName . CHR ], errors = \"coerce\" ) self = self [ self [ ColName . CHR ] . notnull ()] self [ ColName . CHR ] = self [ ColName . CHR ] . astype ( int ) self = self [ self [ ColName . CHR ] . isin ( CHROMS )] return self check_ea_nea () \u00b6 Check if ea and nea are valid. Source code in easyfinemap/sumstat.py 73 74 75 76 77 78 79 def check_ea_nea ( self ): \"\"\"Check if ea and nea are valid.\"\"\" self [ ColName . EA ] = self [ ColName . EA ] . str . upper () self [ ColName . NEA ] = self [ ColName . NEA ] . str . upper () # remove rows with missing ea or nea self = self [ self [ ColName . EA ] . notnull () & self [ ColName . NEA ] . notnull ()] return self check_eaf () \u00b6 Check if eaf is valid. Source code in easyfinemap/sumstat.py 118 119 120 121 122 123 124 125 126 127 def check_eaf ( self ): \"\"\"Check if eaf is valid.\"\"\" if ColName . EAF in self . columns : self [ ColName . EAF ] = pd . to_numeric ( self [ ColName . EAF ], errors = \"coerce\" ) self = self [ self [ ColName . EAF ] . notnull ()] self [ ColName . EAF ] = self [ ColName . EAF ] . astype ( float ) self = self [( self [ ColName . EAF ] > 0 ) & ( self [ ColName . EAF ] < 1 )] else : pass return self check_maf () \u00b6 Check if maf is valid. Source code in easyfinemap/sumstat.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def check_maf ( self ): \"\"\"Check if maf is valid.\"\"\" if ColName . EAF in self . columns : self [ ColName . MAF ] = self [ ColName . EAF ] else : pass if ColName . MAF in self . columns : self [ ColName . MAF ] = pd . to_numeric ( self [ ColName . MAF ], errors = \"coerce\" ) self = self [ self [ ColName . MAF ] . notnull ()] self [ ColName . MAF ] = self [ ColName . MAF ] . astype ( float ) self [ ColName . MAF ] = self [ ColName . MAF ] . apply ( lambda x : min ( x , 1 - x )) else : pass return self check_p () \u00b6 Check if p is valid. Source code in easyfinemap/sumstat.py 81 82 83 84 85 86 87 def check_p ( self ): \"\"\"Check if p is valid.\"\"\" self [ ColName . P ] = pd . to_numeric ( self [ ColName . P ], errors = \"coerce\" ) self = self [ self [ ColName . P ] . notnull ()] self [ ColName . P ] = self [ ColName . P ] . astype ( float ) self = self [( self [ ColName . P ] > 0 ) & ( self [ ColName . P ] < 1 )] return self check_se () \u00b6 Check if se is valid. Source code in easyfinemap/sumstat.py 96 97 98 99 100 101 102 def check_se ( self ): \"\"\"Check if se is valid.\"\"\" self [ ColName . SE ] = pd . to_numeric ( self [ ColName . SE ], errors = \"coerce\" ) self = self [ self [ ColName . SE ] . notnull ()] self [ ColName . SE ] = self [ ColName . SE ] . astype ( float ) self = self [ self [ ColName . SE ] > 0 ] return self check_snpid () \u00b6 Check if snpid is valid. Source code in easyfinemap/sumstat.py 104 105 106 107 108 109 110 111 112 113 114 115 116 def check_snpid ( self ): \"\"\"Check if snpid is valid.\"\"\" if ColName . SNPID in self . columns : self . logger . warning ( \"rewriting SNPID column\" ) del self [ ColName . SNPID ] result = self . copy () allele_df = make_SNPID_unique ( result , remove_duplicates = False ) result . insert ( loc = 0 , column = ColName . SNPID , value = allele_df [ ColName . SNPID ] . values ) # type: ignore result . sort_values ( ColName . P , inplace = True ) result . drop_duplicates ( subset = [ ColName . SNPID ], keep = \"first\" , inplace = True ) result . sort_values ([ ColName . CHR , ColName . BP ], inplace = True ) result . reset_index ( drop = True , inplace = True ) return result drop_allna_cols () \u00b6 Drop all columns with all missing values. Source code in easyfinemap/sumstat.py 29 30 31 32 33 34 def drop_allna_cols ( self ): \"\"\"Drop all columns with all missing values.\"\"\" for col in self . columns : if self [ col ] . isnull () . all (): del self [ col ] return self standarize () \u00b6 Standarize the data. Source code in easyfinemap/sumstat.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def standarize ( self ): \"\"\"Standarize the data.\"\"\" self . _validate () self = self . drop_allna_cols () self = self . check_chr () self = self . check_bp () self = self . check_ea_nea () self = self . check_p () self = self . check_beta () self = self . check_se () self = self . check_snpid () self = self . check_eaf () self = self . check_maf () self [ ColName . Z ] = self [ ColName . BETA ] / self [ ColName . SE ] self . reset_index ( drop = True , inplace = True ) return self","title":"SumStat"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_beta","text":"Check if beta is valid. Source code in easyfinemap/sumstat.py 89 90 91 92 93 94 def check_beta ( self ): \"\"\"Check if beta is valid.\"\"\" self [ ColName . BETA ] = pd . to_numeric ( self [ ColName . BETA ], errors = \"coerce\" ) self = self [ self [ ColName . BETA ] . notnull ()] self [ ColName . BETA ] = self [ ColName . BETA ] . astype ( float ) return self","title":"check_beta()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_bp","text":"Check if bp is a valid integer. Source code in easyfinemap/sumstat.py 65 66 67 68 69 70 71 def check_bp ( self ): \"\"\"Check if bp is a valid integer.\"\"\" # raise NotImplementedError self [ ColName . BP ] = pd . to_numeric ( self [ ColName . BP ], errors = \"coerce\" ) self = self [ self [ ColName . BP ] . notnull ()] self [ ColName . BP ] = self [ ColName . BP ] . astype ( int ) return self","title":"check_bp()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_chr","text":"Check if chromosome is a valid integer. Source code in easyfinemap/sumstat.py 51 52 53 54 55 56 57 58 59 60 61 62 63 def check_chr ( self ): \"\"\"Check if chromosome is a valid integer.\"\"\" # remove chr from chromosome column, if exists self = self [ self [ ColName . CHR ] . notnull ()] . copy () self [ ColName . CHR ] = self [ ColName . CHR ] . astype ( \"str\" ) . str . replace ( \"chr\" , \"\" ) # replace X, with 23 self [ ColName . CHR ] = self [ ColName . CHR ] . replace ( \"X\" , 23 ) # turn chromosome column into integer self [ ColName . CHR ] = pd . to_numeric ( self [ ColName . CHR ], errors = \"coerce\" ) self = self [ self [ ColName . CHR ] . notnull ()] self [ ColName . CHR ] = self [ ColName . CHR ] . astype ( int ) self = self [ self [ ColName . CHR ] . isin ( CHROMS )] return self","title":"check_chr()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_ea_nea","text":"Check if ea and nea are valid. Source code in easyfinemap/sumstat.py 73 74 75 76 77 78 79 def check_ea_nea ( self ): \"\"\"Check if ea and nea are valid.\"\"\" self [ ColName . EA ] = self [ ColName . EA ] . str . upper () self [ ColName . NEA ] = self [ ColName . NEA ] . str . upper () # remove rows with missing ea or nea self = self [ self [ ColName . EA ] . notnull () & self [ ColName . NEA ] . notnull ()] return self","title":"check_ea_nea()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_eaf","text":"Check if eaf is valid. Source code in easyfinemap/sumstat.py 118 119 120 121 122 123 124 125 126 127 def check_eaf ( self ): \"\"\"Check if eaf is valid.\"\"\" if ColName . EAF in self . columns : self [ ColName . EAF ] = pd . to_numeric ( self [ ColName . EAF ], errors = \"coerce\" ) self = self [ self [ ColName . EAF ] . notnull ()] self [ ColName . EAF ] = self [ ColName . EAF ] . astype ( float ) self = self [( self [ ColName . EAF ] > 0 ) & ( self [ ColName . EAF ] < 1 )] else : pass return self","title":"check_eaf()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_maf","text":"Check if maf is valid. Source code in easyfinemap/sumstat.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 def check_maf ( self ): \"\"\"Check if maf is valid.\"\"\" if ColName . EAF in self . columns : self [ ColName . MAF ] = self [ ColName . EAF ] else : pass if ColName . MAF in self . columns : self [ ColName . MAF ] = pd . to_numeric ( self [ ColName . MAF ], errors = \"coerce\" ) self = self [ self [ ColName . MAF ] . notnull ()] self [ ColName . MAF ] = self [ ColName . MAF ] . astype ( float ) self [ ColName . MAF ] = self [ ColName . MAF ] . apply ( lambda x : min ( x , 1 - x )) else : pass return self","title":"check_maf()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_p","text":"Check if p is valid. Source code in easyfinemap/sumstat.py 81 82 83 84 85 86 87 def check_p ( self ): \"\"\"Check if p is valid.\"\"\" self [ ColName . P ] = pd . to_numeric ( self [ ColName . P ], errors = \"coerce\" ) self = self [ self [ ColName . P ] . notnull ()] self [ ColName . P ] = self [ ColName . P ] . astype ( float ) self = self [( self [ ColName . P ] > 0 ) & ( self [ ColName . P ] < 1 )] return self","title":"check_p()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_se","text":"Check if se is valid. Source code in easyfinemap/sumstat.py 96 97 98 99 100 101 102 def check_se ( self ): \"\"\"Check if se is valid.\"\"\" self [ ColName . SE ] = pd . to_numeric ( self [ ColName . SE ], errors = \"coerce\" ) self = self [ self [ ColName . SE ] . notnull ()] self [ ColName . SE ] = self [ ColName . SE ] . astype ( float ) self = self [ self [ ColName . SE ] > 0 ] return self","title":"check_se()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.check_snpid","text":"Check if snpid is valid. Source code in easyfinemap/sumstat.py 104 105 106 107 108 109 110 111 112 113 114 115 116 def check_snpid ( self ): \"\"\"Check if snpid is valid.\"\"\" if ColName . SNPID in self . columns : self . logger . warning ( \"rewriting SNPID column\" ) del self [ ColName . SNPID ] result = self . copy () allele_df = make_SNPID_unique ( result , remove_duplicates = False ) result . insert ( loc = 0 , column = ColName . SNPID , value = allele_df [ ColName . SNPID ] . values ) # type: ignore result . sort_values ( ColName . P , inplace = True ) result . drop_duplicates ( subset = [ ColName . SNPID ], keep = \"first\" , inplace = True ) result . sort_values ([ ColName . CHR , ColName . BP ], inplace = True ) result . reset_index ( drop = True , inplace = True ) return result","title":"check_snpid()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.drop_allna_cols","text":"Drop all columns with all missing values. Source code in easyfinemap/sumstat.py 29 30 31 32 33 34 def drop_allna_cols ( self ): \"\"\"Drop all columns with all missing values.\"\"\" for col in self . columns : if self [ col ] . isnull () . all (): del self [ col ] return self","title":"drop_allna_cols()"},{"location":"api/Sumstat/#easyfinemap.sumstat.SumStat.standarize","text":"Standarize the data. Source code in easyfinemap/sumstat.py 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 def standarize ( self ): \"\"\"Standarize the data.\"\"\" self . _validate () self = self . drop_allna_cols () self = self . check_chr () self = self . check_bp () self = self . check_ea_nea () self = self . check_p () self = self . check_beta () self = self . check_se () self = self . check_snpid () self = self . check_eaf () self = self . check_maf () self [ ColName . Z ] = self [ ColName . BETA ] / self [ ColName . SE ] self . reset_index ( drop = True , inplace = True ) return self","title":"standarize()"},{"location":"api/easyfinemap/","text":"Bases: object Main class. Source code in easyfinemap/easyfinemap.py 33 34 35 36 37 38 39 40 41 42 43 44 45 def __init__ ( self ): \"\"\"Initialize.\"\"\" self . logger = logging . getLogger ( 'EasyFinemap' ) tool = Tools () self . finemap = tool . finemap self . paintor = tool . paintor self . gcta = tool . gcta self . plink = tool . plink self . bcftools = tool . bcftools self . caviarbf = tool . caviarbf self . tmp_root = Path . cwd () / \"tmp\" / \"finemapping\" if not self . tmp_root . exists (): self . tmp_root . mkdir ( parents = True ) cojo_cond ( sumstats , ldref , cond_snps , out , sample_size , use_ref_EAF = False , temp_dir = None ) \u00b6 Conditional analysis. Update the beta, se, pval of the conditional SNPs. Using cojo-cond in GCTA. Condition on the SNPs in cond_snps. Parameters: Name Type Description Default sumstats pd . DataFrame Summary statistics. required ldref str LD reference file. required cond_snps List [ str ] SNPs to condition on. required out str Output file. required sample_size int Sample size. required use_ref_EAF bool , optional Use the EAF in the LD reference file, by default False False Returns: Type Description pd . DataFrame Conditional summary statistics. Source code in easyfinemap/easyfinemap.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 @io_in_tempdir ( './tmp/finemapping' ) def cojo_cond ( self , sumstats : pd . DataFrame , ldref : str , cond_snps : List [ str ], out : str , sample_size : int , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Conditional analysis. Update the beta, se, pval of the conditional SNPs. Using cojo-cond in GCTA. Condition on the SNPs in cond_snps. Parameters ---------- sumstats : pd.DataFrame Summary statistics. ldref : str LD reference file. cond_snps : List[str] SNPs to condition on. out : str Output file. sample_size : int Sample size. use_ref_EAF : bool, optional Use the EAF in the LD reference file, by default False Returns ------- pd.DataFrame Conditional summary statistics. \"\"\" if not use_ref_EAF and ColName . EAF not in sumstats . columns : raise ValueError ( f \" { ColName . EAF } is not in the sumstats, please set use_ref_EAF to True\" ) chrom = sumstats [ ColName . CHR ] . iloc [ 0 ] ld = LDRef () cojo_input = ld . intersect ( sumstats , ldref , f \" { temp_dir } /cojo_input_ { chrom } \" , use_ref_EAF ) cojo_input [ ColName . N ] = sample_size cojo_input = cojo_input [ [ ColName . SNPID , ColName . EA , ColName . NEA , ColName . EAF , ColName . BETA , ColName . SE , ColName . P , ColName . N ] ] cojo_input . rename ( columns = { ColName . SNPID : \"SNP\" , ColName . EA : \"A1\" , ColName . NEA : \"A2\" , ColName . EAF : \"freq\" , ColName . BETA : \"b\" , ColName . SE : \"se\" , ColName . P : \"p\" , ColName . N : \"N\" , }, inplace = True , ) cojo_p_file = f \" { temp_dir } /cojo_input_ { chrom } .ma\" cojo_input . to_csv ( cojo_p_file , sep = \" \" , index = False ) with open ( f \" { temp_dir } /cojo_cond_ { chrom } .snps\" , \"w\" ) as f : f . write ( ' \\n ' . join ( cond_snps )) cojo_outfile = f \" { temp_dir } /cojo_ { chrom } .cond\" cmd = [ self . gcta , \"--bfile\" , ldref , \"--cojo-file\" , cojo_p_file , \"--cojo-cond\" , f \" { temp_dir } /cojo_cond_ { chrom } .snps\" , \"--out\" , cojo_outfile , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : cond_res = pd . read_csv ( f \" { cojo_outfile } .cond.cma.cojo\" , sep = \" \\t \" ) return cond_res finemap_locus ( locus , sumstat , ldref , out , method , sample_size , use_ref_EAF = False , temp_dir = None ) \u00b6 Finemap a locus. Parameters: Name Type Description Default locus Loci Locus to finemap. required sumstat SumStat Summary statistics. required ldref LDRef LD reference. required out str Output file. required method str Method to use. required sample_size int Sample size. required use_ref_EAF bool , optional Use the EAF in the LD reference file, by default False False temp_dir Optional [ str ], optional Temporary directory, by default None None Returns: Type Description pd . DataFrame Finemapping results. Source code in easyfinemap/easyfinemap.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def finemap_locus ( self , locus : pd . DataFrame , sumstat : pd . DataFrame , ldref : str , out : str , method : str , sample_size : int , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> None : \"\"\" Finemap a locus. Parameters ---------- locus : Loci Locus to finemap. sumstat : SumStat Summary statistics. ldref : LDRef LD reference. out : str Output file. method : str Method to use. sample_size : int Sample size. use_ref_EAF : bool, optional Use the EAF in the LD reference file, by default False temp_dir : Optional[str], optional Temporary directory, by default None Returns ------- pd.DataFrame Finemapping results. \"\"\" if method not in [ \"finemap\" , \"paintor\" , \"caviarbf\" , \"susie\" , \"polyfun+susie\" ]: raise ValueError ( f \"Method { method } not supported\" ) if method == \"finemap\" : raise NotImplementedError elif method == \"paintor\" : raise NotImplementedError elif method == \"caviarbf\" : raise NotImplementedError elif method == \"susie\" : raise NotImplementedError elif method == \"polyfun+susie\" : raise NotImplementedError make_ld ( sumstat , ldref , out ) \u00b6 Make the LD matrix. Source code in easyfinemap/easyfinemap.py 130 131 132 133 @io_in_tempdir ( './tmp/finemapping' ) def make_ld ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Make the LD matrix.\"\"\" self . logger . info ( \"Making the LD matrix\" ) run_finemap ( sumstat , ldref , out ) \u00b6 Run FINEMAP. Source code in easyfinemap/easyfinemap.py 135 136 137 138 def run_finemap ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Run FINEMAP.\"\"\" self . logger . info ( \"Running FINEMAP\" ) raise NotImplementedError run_paintor ( sumstat , ldref , out ) \u00b6 Run PAINTOR. Source code in easyfinemap/easyfinemap.py 140 141 142 143 def run_paintor ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Run PAINTOR.\"\"\" self . logger . info ( \"Running PAINTOR\" ) raise NotImplementedError","title":"easyfinemap"},{"location":"api/easyfinemap/#easyfinemap.easyfinemap.EasyFinemap.cojo_cond","text":"Conditional analysis. Update the beta, se, pval of the conditional SNPs. Using cojo-cond in GCTA. Condition on the SNPs in cond_snps. Parameters: Name Type Description Default sumstats pd . DataFrame Summary statistics. required ldref str LD reference file. required cond_snps List [ str ] SNPs to condition on. required out str Output file. required sample_size int Sample size. required use_ref_EAF bool , optional Use the EAF in the LD reference file, by default False False Returns: Type Description pd . DataFrame Conditional summary statistics. Source code in easyfinemap/easyfinemap.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 @io_in_tempdir ( './tmp/finemapping' ) def cojo_cond ( self , sumstats : pd . DataFrame , ldref : str , cond_snps : List [ str ], out : str , sample_size : int , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> pd . DataFrame : \"\"\" Conditional analysis. Update the beta, se, pval of the conditional SNPs. Using cojo-cond in GCTA. Condition on the SNPs in cond_snps. Parameters ---------- sumstats : pd.DataFrame Summary statistics. ldref : str LD reference file. cond_snps : List[str] SNPs to condition on. out : str Output file. sample_size : int Sample size. use_ref_EAF : bool, optional Use the EAF in the LD reference file, by default False Returns ------- pd.DataFrame Conditional summary statistics. \"\"\" if not use_ref_EAF and ColName . EAF not in sumstats . columns : raise ValueError ( f \" { ColName . EAF } is not in the sumstats, please set use_ref_EAF to True\" ) chrom = sumstats [ ColName . CHR ] . iloc [ 0 ] ld = LDRef () cojo_input = ld . intersect ( sumstats , ldref , f \" { temp_dir } /cojo_input_ { chrom } \" , use_ref_EAF ) cojo_input [ ColName . N ] = sample_size cojo_input = cojo_input [ [ ColName . SNPID , ColName . EA , ColName . NEA , ColName . EAF , ColName . BETA , ColName . SE , ColName . P , ColName . N ] ] cojo_input . rename ( columns = { ColName . SNPID : \"SNP\" , ColName . EA : \"A1\" , ColName . NEA : \"A2\" , ColName . EAF : \"freq\" , ColName . BETA : \"b\" , ColName . SE : \"se\" , ColName . P : \"p\" , ColName . N : \"N\" , }, inplace = True , ) cojo_p_file = f \" { temp_dir } /cojo_input_ { chrom } .ma\" cojo_input . to_csv ( cojo_p_file , sep = \" \" , index = False ) with open ( f \" { temp_dir } /cojo_cond_ { chrom } .snps\" , \"w\" ) as f : f . write ( ' \\n ' . join ( cond_snps )) cojo_outfile = f \" { temp_dir } /cojo_ { chrom } .cond\" cmd = [ self . gcta , \"--bfile\" , ldref , \"--cojo-file\" , cojo_p_file , \"--cojo-cond\" , f \" { temp_dir } /cojo_cond_ { chrom } .snps\" , \"--out\" , cojo_outfile , ] res = run ( cmd , stdout = PIPE , stderr = PIPE , universal_newlines = True ) if res . returncode != 0 : self . logger . error ( res . stderr ) raise RuntimeError ( res . stderr ) else : cond_res = pd . read_csv ( f \" { cojo_outfile } .cond.cma.cojo\" , sep = \" \\t \" ) return cond_res","title":"cojo_cond()"},{"location":"api/easyfinemap/#easyfinemap.easyfinemap.EasyFinemap.finemap_locus","text":"Finemap a locus. Parameters: Name Type Description Default locus Loci Locus to finemap. required sumstat SumStat Summary statistics. required ldref LDRef LD reference. required out str Output file. required method str Method to use. required sample_size int Sample size. required use_ref_EAF bool , optional Use the EAF in the LD reference file, by default False False temp_dir Optional [ str ], optional Temporary directory, by default None None Returns: Type Description pd . DataFrame Finemapping results. Source code in easyfinemap/easyfinemap.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 def finemap_locus ( self , locus : pd . DataFrame , sumstat : pd . DataFrame , ldref : str , out : str , method : str , sample_size : int , use_ref_EAF : bool = False , temp_dir : Optional [ str ] = None , ) -> None : \"\"\" Finemap a locus. Parameters ---------- locus : Loci Locus to finemap. sumstat : SumStat Summary statistics. ldref : LDRef LD reference. out : str Output file. method : str Method to use. sample_size : int Sample size. use_ref_EAF : bool, optional Use the EAF in the LD reference file, by default False temp_dir : Optional[str], optional Temporary directory, by default None Returns ------- pd.DataFrame Finemapping results. \"\"\" if method not in [ \"finemap\" , \"paintor\" , \"caviarbf\" , \"susie\" , \"polyfun+susie\" ]: raise ValueError ( f \"Method { method } not supported\" ) if method == \"finemap\" : raise NotImplementedError elif method == \"paintor\" : raise NotImplementedError elif method == \"caviarbf\" : raise NotImplementedError elif method == \"susie\" : raise NotImplementedError elif method == \"polyfun+susie\" : raise NotImplementedError","title":"finemap_locus()"},{"location":"api/easyfinemap/#easyfinemap.easyfinemap.EasyFinemap.make_ld","text":"Make the LD matrix. Source code in easyfinemap/easyfinemap.py 130 131 132 133 @io_in_tempdir ( './tmp/finemapping' ) def make_ld ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Make the LD matrix.\"\"\" self . logger . info ( \"Making the LD matrix\" )","title":"make_ld()"},{"location":"api/easyfinemap/#easyfinemap.easyfinemap.EasyFinemap.run_finemap","text":"Run FINEMAP. Source code in easyfinemap/easyfinemap.py 135 136 137 138 def run_finemap ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Run FINEMAP.\"\"\" self . logger . info ( \"Running FINEMAP\" ) raise NotImplementedError","title":"run_finemap()"},{"location":"api/easyfinemap/#easyfinemap.easyfinemap.EasyFinemap.run_paintor","text":"Run PAINTOR. Source code in easyfinemap/easyfinemap.py 140 141 142 143 def run_paintor ( self , sumstat : pd . DataFrame , ldref : LDRef , out : str ): \"\"\"Run PAINTOR.\"\"\" self . logger . info ( \"Running PAINTOR\" ) raise NotImplementedError","title":"run_paintor()"},{"location":"api/tools/","text":"check if tools are installed and return their path. Source code in easyfinemap/tools.py 12 13 14 def __init__ ( self ): \"\"\"Initialize.\"\"\" self . logger = logging . getLogger ( \"Tools\" ) bcftools property \u00b6 Check if bcftools is installed. caviarbf property \u00b6 Check if caviarbf is installed. finemap property \u00b6 Check if finemap is installed. gcta property \u00b6 Check if gcta is installed. paintor property \u00b6 Check if paintor is installed. plink property \u00b6 Check if plink is installed.","title":"Tools"},{"location":"api/tools/#easyfinemap.tools.Tools.bcftools","text":"Check if bcftools is installed.","title":"bcftools"},{"location":"api/tools/#easyfinemap.tools.Tools.caviarbf","text":"Check if caviarbf is installed.","title":"caviarbf"},{"location":"api/tools/#easyfinemap.tools.Tools.finemap","text":"Check if finemap is installed.","title":"finemap"},{"location":"api/tools/#easyfinemap.tools.Tools.gcta","text":"Check if gcta is installed.","title":"gcta"},{"location":"api/tools/#easyfinemap.tools.Tools.paintor","text":"Check if paintor is installed.","title":"paintor"},{"location":"api/tools/#easyfinemap.tools.Tools.plink","text":"Check if plink is installed.","title":"plink"},{"location":"api/utils/","text":"Utils for easyfinemap. get_significant_snps ( df , pvalue_threshold = 5e-08 ) \u00b6 Get the significant snps from the input file, filter by pvalue. Parameters: Name Type Description Default df pd . DataFrame The input summary statistics. required pvalue_threshold float , optional The pvalue threshold, by default 5e-8 5e-08 Returns: Type Description pd . DataFrame The significant snps, sorted by pvalue. Source code in easyfinemap/utils.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def get_significant_snps ( df : pd . DataFrame , pvalue_threshold : float = 5e-8 ): \"\"\" Get the significant snps from the input file, filter by pvalue. Parameters ---------- df : pd.DataFrame The input summary statistics. pvalue_threshold : float, optional The pvalue threshold, by default 5e-8 Returns ------- pd.DataFrame The significant snps, sorted by pvalue. \"\"\" sig_df = df . loc [ df [ ColName . P ] < pvalue_threshold ] . copy () sig_df . sort_values ( ColName . P , inplace = True ) sig_df . reset_index ( drop = True , inplace = True ) return sig_df io_in_tempdir ( dir = './tmp' ) \u00b6 Make tempdir for process. Parameters: Name Type Description Default dir str , optional The tempdir, by default './tmp' './tmp' Returns: Type Description decorator The decorator of io in tempdir. Source code in easyfinemap/utils.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def io_in_tempdir ( dir = './tmp' ): \"\"\" Make tempdir for process. Parameters ---------- dir : str, optional The tempdir, by default './tmp' Returns ------- decorator The decorator of io in tempdir. \"\"\" def decorator ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): temp_dir = tempfile . mkdtemp ( dir = dir ) # logger = logging.getLogger(\"IO\") # logger.debug(f\"Tempdir: {temp_dir}\") try : result = func ( * args , temp_dir = temp_dir , ** kwargs ) except Exception : raise else : if logging . getLogger () . getEffectiveLevel () >= logging . INFO : shutil . rmtree ( temp_dir ) pass return result # type: ignore return wrapper return decorator make_SNPID_unique ( sumstat , replace_rsIDcol = False , remove_duplicates = True ) \u00b6 Make the SNPID unique. The unique SNPID is chr-bp-sorted(EA,NEA) Parameters: Name Type Description Default sumstat pd . DataFrame The input summary statistics. required replace_rsIDcol bool , optional Whether to replace the rsID column with the unique SNPID, by default False False remove_duplicates bool , optional Whether to remove the duplicated SNPs, keep the one with smallest P-value, by default True True Returns: Type Description pd . DataFrame The summary statistics with unique SNPID. Source code in easyfinemap/utils.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def make_SNPID_unique ( sumstat : pd . DataFrame , replace_rsIDcol : bool = False , remove_duplicates : bool = True ): \"\"\" Make the SNPID unique. The unique SNPID is chr-bp-sorted(EA,NEA) Parameters ---------- sumstat : pd.DataFrame The input summary statistics. replace_rsIDcol : bool, optional Whether to replace the rsID column with the unique SNPID, by default False remove_duplicates : bool, optional Whether to remove the duplicated SNPs, keep the one with smallest P-value, by default True Returns ------- pd.DataFrame The summary statistics with unique SNPID. \"\"\" df = sumstat . copy () allele_df = df [[ ColName . EA , ColName . NEA ]] . copy () b = allele_df . values b . sort ( axis = 1 ) allele_df [[ ColName . EA , ColName . NEA ]] = b allele_df [ ColName . SNPID ] = ( df [ ColName . CHR ] . astype ( str ) + \"-\" + df [ ColName . BP ] . astype ( str ) + \"-\" + allele_df [ ColName . EA ] + \"-\" + allele_df [ ColName . NEA ] ) if replace_rsIDcol : df [ ColName . RSID ] = allele_df [ ColName . SNPID ] else : df . insert ( loc = 0 , column = ColName . SNPID , value = allele_df [ ColName . SNPID ] . values ) # type: ignore if remove_duplicates : df . sort_values ( ColName . P , inplace = True ) if replace_rsIDcol : df . drop_duplicates ( subset = [ ColName . RSID ], keep = \"first\" , inplace = True ) else : df . drop_duplicates ( subset = [ ColName . SNPID ], keep = \"first\" , inplace = True ) df . sort_values ([ ColName . CHR , ColName . BP ], inplace = True ) df . reset_index ( drop = True , inplace = True ) return df","title":"utils"},{"location":"api/utils/#easyfinemap.utils.get_significant_snps","text":"Get the significant snps from the input file, filter by pvalue. Parameters: Name Type Description Default df pd . DataFrame The input summary statistics. required pvalue_threshold float , optional The pvalue threshold, by default 5e-8 5e-08 Returns: Type Description pd . DataFrame The significant snps, sorted by pvalue. Source code in easyfinemap/utils.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def get_significant_snps ( df : pd . DataFrame , pvalue_threshold : float = 5e-8 ): \"\"\" Get the significant snps from the input file, filter by pvalue. Parameters ---------- df : pd.DataFrame The input summary statistics. pvalue_threshold : float, optional The pvalue threshold, by default 5e-8 Returns ------- pd.DataFrame The significant snps, sorted by pvalue. \"\"\" sig_df = df . loc [ df [ ColName . P ] < pvalue_threshold ] . copy () sig_df . sort_values ( ColName . P , inplace = True ) sig_df . reset_index ( drop = True , inplace = True ) return sig_df","title":"get_significant_snps()"},{"location":"api/utils/#easyfinemap.utils.io_in_tempdir","text":"Make tempdir for process. Parameters: Name Type Description Default dir str , optional The tempdir, by default './tmp' './tmp' Returns: Type Description decorator The decorator of io in tempdir. Source code in easyfinemap/utils.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def io_in_tempdir ( dir = './tmp' ): \"\"\" Make tempdir for process. Parameters ---------- dir : str, optional The tempdir, by default './tmp' Returns ------- decorator The decorator of io in tempdir. \"\"\" def decorator ( func ): @wraps ( func ) def wrapper ( * args , ** kwargs ): temp_dir = tempfile . mkdtemp ( dir = dir ) # logger = logging.getLogger(\"IO\") # logger.debug(f\"Tempdir: {temp_dir}\") try : result = func ( * args , temp_dir = temp_dir , ** kwargs ) except Exception : raise else : if logging . getLogger () . getEffectiveLevel () >= logging . INFO : shutil . rmtree ( temp_dir ) pass return result # type: ignore return wrapper return decorator","title":"io_in_tempdir()"},{"location":"api/utils/#easyfinemap.utils.make_SNPID_unique","text":"Make the SNPID unique. The unique SNPID is chr-bp-sorted(EA,NEA) Parameters: Name Type Description Default sumstat pd . DataFrame The input summary statistics. required replace_rsIDcol bool , optional Whether to replace the rsID column with the unique SNPID, by default False False remove_duplicates bool , optional Whether to remove the duplicated SNPs, keep the one with smallest P-value, by default True True Returns: Type Description pd . DataFrame The summary statistics with unique SNPID. Source code in easyfinemap/utils.py 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 def make_SNPID_unique ( sumstat : pd . DataFrame , replace_rsIDcol : bool = False , remove_duplicates : bool = True ): \"\"\" Make the SNPID unique. The unique SNPID is chr-bp-sorted(EA,NEA) Parameters ---------- sumstat : pd.DataFrame The input summary statistics. replace_rsIDcol : bool, optional Whether to replace the rsID column with the unique SNPID, by default False remove_duplicates : bool, optional Whether to remove the duplicated SNPs, keep the one with smallest P-value, by default True Returns ------- pd.DataFrame The summary statistics with unique SNPID. \"\"\" df = sumstat . copy () allele_df = df [[ ColName . EA , ColName . NEA ]] . copy () b = allele_df . values b . sort ( axis = 1 ) allele_df [[ ColName . EA , ColName . NEA ]] = b allele_df [ ColName . SNPID ] = ( df [ ColName . CHR ] . astype ( str ) + \"-\" + df [ ColName . BP ] . astype ( str ) + \"-\" + allele_df [ ColName . EA ] + \"-\" + allele_df [ ColName . NEA ] ) if replace_rsIDcol : df [ ColName . RSID ] = allele_df [ ColName . SNPID ] else : df . insert ( loc = 0 , column = ColName . SNPID , value = allele_df [ ColName . SNPID ] . values ) # type: ignore if remove_duplicates : df . sort_values ( ColName . P , inplace = True ) if replace_rsIDcol : df . drop_duplicates ( subset = [ ColName . RSID ], keep = \"first\" , inplace = True ) else : df . drop_duplicates ( subset = [ ColName . SNPID ], keep = \"first\" , inplace = True ) df . sort_values ([ ColName . CHR , ColName . BP ], inplace = True ) df . reset_index ( drop = True , inplace = True ) return df","title":"make_SNPID_unique()"}]}